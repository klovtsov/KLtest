#!perl
use ParApi::ApiClient;
use Getopt::Long;

$timeout= '';
$changeFrequency= '';
$primaryEmail = '';
$releaseDuration = '';          
$systemAutoFlag = '';          
$functionalAccount = '';        
$funcAcctCred = '';             
$changeTime = '';             
$passwordCheckProfile = '';           
$passwordChangeProfile = '';           
$passwordRule = '';           
$portNumber = '';           
$enablePassword = '';          
$alternateIP = '';           
$description = '';          
$domainFuncAccount = '';    
$boksServerOS = '';            
$lineDef = '';                 
$timeout = '';                 
$domainName = '';              
$oracleType = '';              
$oracleSIDSN = '';             
$checkFlag = '';               
$resetFlag = '';               
$releaseChangeFlag = '';        
$netBIOSName = '';              
$maxReleaseDuration = '';       
$nonPrivFuncFlag = '';         
$useSslFlag = '';              
$allowFuncReqFlag = '';        
$escalationTime = '';          
$escalationEmail = '';          
$egpOnlyFlag = '';               
$platSpecificValue = '';       
$ticketSystemName = '';          
$requireTicketForRequest = '';  
$requireTicketForISA = '';      
$requireTicketForCLI = '';      
$requireTicketForAPI = '';      
$requireTicketForPSM = '';      
$ticketEmailNotify = '';        
$templateSystemName = '';        
$allowISADurationFlag = '';     
$custom1 = '';                 
$custom2 = '';                 
$custom3 = '';                  
$custom4 = '';                  
$custom5 = '';                  
$custom6 = '';                  
$useSshFlag = '';                
$sshAccount = '';                
$sshPort = '';                  
$sshKey = '';                   
$autoDiscoveryProfile = '';    
$autoDiscoveryExcludeList = ''; 
$autoDiscoveryTimeout = '';
$psmDpaAffinity = '';
$ppmDpaAffinity = '';
$profileCertType = '';
$profileCertThumbprint = '';
$profileCertPassword = '';
$funcAcctDN = '';


GetOptions(
"keyFileName:s"  	 		=> \$keyFileName,
"apiuserName:s"  			=> \$apiuserName,
"host:s"  					=> \$host,
"systemName:s"   			=> \$systemName,
"networkAddress:s"  		=> \$networkAddress,
"platformName:s"  			=> \$platformName,
"timeout:i"					=> \$timeout,
"changeFrequency:i"			=> \$changeFrequency,
"primaryEmail:s"			=> \$primaryEmail,
"releaseDuration:s"			=> \$releaseDuration,         
"systemAutoFlag:s"			=> \$systemAutoFlag,         
"functionalAccount:s"		=> \$functionalAccount,       
"funcAcctCred:s"			=> \$funcAcctCred,            
"changeTime:s"				=> \$changeTime,            
"passwordCheckProfile:s"	=> \$passwordCheckProfile,          
"passwordChangeProfile:s"	=> \$passwordChangeProfile,          
"passwordRule:s"			=> \$passwordRule,          
"portNumber:s"				=> \$portNumber,          
"enablePassword:s"			=> \$enablePassword,         
"alternateIP:s"				=> \$alternateIP,          
"description:s"				=> \$description,         
"domainFuncAccount:s"		=> \$domainFuncAccount,   
"boksServerOS:s"			=> \$boksServerOS,           
"lineDef:s"					=> \$lineDef,                
"domainName:s"				=> \$domainName,             
"oracleType:s"				=> \$oracleType,             
"oracleSIDSN:s"				=> \$oracleSIDSN,            
"checkFlag:s"				=> \$checkFlag,              
"resetFlag:s"				=> \$resetFlag,              
"releaseChangeFlag:s"		=> \$releaseChangeFlag,       
"netBIOSName:s"				=> \$netBIOSName,             
"maxReleaseDuration:s"		=> \$maxReleaseDuration,      
"nonPrivFuncFlag:s"			=> \$nonPrivFuncFlag,        
"useSslFlag:s"				=> \$useSslFlag,             
"allowFuncReqFlag:s"		=> \$allowFuncReqFlag,       
"escalationTime:s"			=> \$escalationTime,         
"escalationEmail:s"			=> \$escalationEmail,         
"egpOnlyFlag:s"				=> \$egpOnlyFlag,              
"platSpecificValue:s"		=> \$platSpecificValue,      
"ticketSystemName:s"		=> \$ticketSystemName,         
"requireTicketForRequest:s"	=> \$requireTicketForRequest, 
"requireTicketForISA:s"		=> \$requireTicketForISA,     
"requireTicketForCLI:s"		=> \$requireTicketForCLI,     
"requireTicketForAPI:s"		=> \$requireTicketForAPI,     
"requireTicketForPSM:s"		=> \$requireTicketForPSM,     
"ticketEmailNotify:s"		=> \$ticketEmailNotify,       
"templateSystemName:s"		=> \$templateSystemName,       
"allowISADurationFlag:s"	=> \$allowISADurationFlag,    
"custom1:s"					=> \$custom1,                
"custom2:s"					=> \$custom2,                
"custom3:s"					=> \$custom3,                 
"custom4:s"					=> \$custom4,                 
"custom5:s"					=> \$custom5,                 
"custom6:s"					=> \$custom6,                 
"useSshFlag:s"				=> \$useSshFlag,               
"sshAccount:s"				=> \$sshAccount,               
"sshPort:s"					=> \$sshPort,                 
"sshKey:s"					=> \$sshKey,                  
"autoDiscoveryProfile:s"	=> \$autoDiscoveryProfile,   
"autoDiscoveryExcludeList:s"	=> \$autoDiscoveryExcludeList,
"autoDiscoveryTimeout:s"	=> \$autoDiscoveryTimeout,
"psmDpaAffinity:s"			=> \$psmDpaAffinity,
"ppmDpaAffinity:s"			=> \$ppmDpaAffinity,
"profileCertType:s"			=> \$profileCertType,
"profileCertThumbprint:s"	=> \$profileCertThumbprint,
"profileCertPassword:s"		=> \$profileCertPassword,
"funcAcctDN:s"				=> \$funcAcctDN

	);
	
my $client = ParApi::ApiClient->new(host        => $host,
                                    keyFileName => $keyFileName,
                                    userName    => $apiuserName);
									
$client->setCommandTimeout(120);  # set timeout to 120 seconds

($rc, $id, $msg) = $client->updateSystem(
systemName  => $systemName,
networkAddress  => $networkAddress,
platformName => $platformName,
timeout => $timeout,
changeFrequency => $changeFrequency,
primaryEmail => $primaryEmail,	
releaseDuration	=> $releaseDuration,         	
systemAutoFlag => $systemAutoFlag,         	
functionalAccount	=>  $functionalAccount,       	
funcAcctCred	=>  $funcAcctCred,            	
changeTime	=> $changeTime,            	
passwordCheckProfile	=> $passwordCheckProfile,          	
passwordChangeProfile	=> $passwordChangeProfile,          	
passwordRule	=> $passwordRule,          	
portNumber	=> $portNumber,          	
enablePassword	=> $enablePassword,         	
alternateIP	=> $alternateIP,          	
description	=> $description,         	
domainFuncAccount => $domainFuncAccount,   	
boksServerOS => $boksServerOS,           	
lineDef	=> $lineDef,                	
domainName	=> $domainName,             	
oracleType	=> $oracleType,             	
oracleSIDSN	=> $oracleSIDSN,            	
checkFlag => $checkFlag,              	
resetFlag	=> $resetFlag,              	
releaseChangeFlag	=> $releaseChangeFlag,       	
netBIOSName	=> $netBIOSName,             	
maxReleaseDuration	=> $maxReleaseDuration,      	
nonPrivFuncFlag	=> $nonPrivFuncFlag,        	
useSslFlag	=> $useSslFlag,             	
allowFuncReqFlag	=> $allowFuncReqFlag,       	
escalationTime	=> $escalationTime,         	
escalationEmail	=> $escalationEmail,         	
egpOnlyFlag	=> $egpOnlyFlag,              	
#platSpecificValue	=> $platSpecificValue,      	
ticketSystemName	=> $ticketSystemName,         	
requireTicketForRequest	=> $requireTicketForRequest, 	
requireTicketForISA	=> $requireTicketForISA,     	
requireTicketForCLI	=> $requireTicketForCLI,     	
requireTicketForAPI	=> $requireTicketForAPI,     	
requireTicketForPSM	=> $requireTicketForPSM,     	
ticketEmailNotify	=> $ticketEmailNotify,       	
allowISADurationFlag => $allowISADurationFlag,    	
custom1	=> $custom1,                	
custom2	=> $custom2,                	
custom3	=> $custom3,                 	
custom4	=> $custom4,                 	
custom5	=> $custom5,                 	
custom6	=> $custom6,                 	
useSshFlag	=> $useSshFlag,               	
sshAccount	=> $sshAccount,               	
sshPort	=> $sshPort,                 	
sshKey	=> $sshKey,                  	
autoDiscoveryProfile	=> $autoDiscoveryProfile,   	
autoDiscoveryExcludeList	=> $autoDiscoveryExcludeList,
autoDiscoveryTimeout	=> $autoDiscoveryTimeout,	
psmDpaAffinity	=> $psmDpaAffinity,
ppmDpaAffinity	=> $ppmDpaAffinity,
profileCertType => $profileCertType,
profileCertThumbprint => $profileCertThumbprint,
profileCertPassword => $profileCertPassword,
funcAcctDN => $funcAcctDN

);

$debug = " rc: ". $rc . " id: " . $id . " msg: " . $msg;
print $debug . "\n";


