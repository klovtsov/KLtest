!3 First System Operations
!| scenario       |Add First System                                                                                                                                                                                                                                                                        |
|$res=            |CLI|${CLIBatch} AddSystem --SystemName ${SystemName} --NetworkAddress ${SystemAddress} --PlatformName \"${SystemPlatform}\" --FunctionalAccount ${FunctAcct} --FuncAcctCred \"${FunctAcctPwd}\" --Timeout ${SystemTimeout} --DomainName ${DomainName} --NetBiosName ${NETBIOSDomainName}|
|Verify_Contain_OR|$res;;successful                                                                                                                                                                                                                                                                        |

!| scenario       |Create Account on First System                                                                                                                       |
|$res=            |PowerShellScript|manageADusers.ps1 create ${SystemAddress} ${NETBIOSDomainName}\${FunctAcct} ${FunctAcctPwd} ${ManagedAccount} "${ManagedAccountPwd}"|
|Verify_Contain_OR|$res;;successful                                                                                                                                     |
|$res=            |PowerShellScript|manageADgroups.ps1 addmember ${SystemAddress} ${NETBIOSDomainName}\${FunctAcct} ${FunctAcctPwd} "Domain Admins" ${ManagedAccount}   |
|Verify_Contain_OR|$res;;successful                                                                                                                                     |

!|scenario        |Login to first system|System          |with password          |pwd          |
|$res=            |PowerShellScript     |manageADusers.ps1 login @System ${ManagedAccount} @pwd|
|Verify_Contain_OR|$res;;successful                                                            |

!|scenario        |Remove Account from First System                                                                         |
|$res=            |PowerShellScript|manageADusers.ps1 delete ${SystemAddress} ${FunctAcct} ${FunctAcctPwd} ${ManagedAccount}|
|Verify_Contain_OR|$res;;successful                                                                                         |

!| scenario       |Request and Get Password for|account                        |from                       |system                       |
|$res=            |CLI                         |${CLIBatch} AddPwdRequest --SystemName @system --AccountName @account --RequestNotes test|
|Verify_Contain_OR|$res;;submitted                                                                                                       |
|$RequestID=      |get_RequestID               |$res                                                                                     |
|$GeneratedPwd=   |CLI                         |${CLIBatch} Retrieve --RequestID $RequestID                                              |

!3 Second System operations
!| scenario       |Add Second System                                                                                                                                                                                                                                                          |
|$res=            |CLI|${CLIBatch} AddSystem --SystemName ${SecSystemName} --NetworkAddress ${SecSystemAddress} --PlatformName \"${SecSystemPlatform}\" --FunctionalAccount ${SecFunctAcct} --FuncAcctCred \"${SecFunctAcctPwd}\" --PortNumber ${SecConnectionPort} --Timeout ${SystemTimeout}|
|Verify_Contain_OR|$res;;successful                                                                                                                                                                                                                                                           |

!|scenario    |Create Account on Second System                                                                                                                      |
|accountAction|${SecSystemPlatform};;create;;${SecSystemAddress};;${SecFunctAcct};;${SecFunctAcctPwd};;${SecConnectionPort};;${ManagedAccount};;${ManagedAccountPwd}|

!|scenario    |Login to second system         |System         |with password         |pwd         |
|accountAction|${SecSystemPlatform};;login;;@System;;${ManagedAccount};;${SecConnectionPort};;@pwd|

!|scenario    |Remove Account from Second System                                                                                              |
|accountAction|${SecSystemPlatform};;delete;;${SecSystemAddress};;${SecFunctAcct};;${SecFunctAcctPwd};;${SecConnectionPort};;${ManagedAccount}|

!|scenario        |Check Login to second system failed with password|pwd                                                                                                     |
|$res=            |RunBatchGetOutput                                |Platforms\${SecSystemPlatform}.bat;login;${SecSystemAddress};${ManagedAccount};${SecConnectionPort};@pwd|
|Verify_Contain_OR|$res;;EXIT 1                                                                                                                                              |

!|scenario        |Drop second system account from Sync Password                                                                                  |
|$res=            |CLI|${CLIBatch} DropSyncPwdSub --SyncPassName ${SyncPasswordName} --SystemName ${SecSystemName} --AccountName ${ManagedAccount}|
|Verify_Contain_OR|$res;;successfully                                                                                                             |

!3 Common operations
!|scenario        |Add Managed Account on|SystemName                                                                                                                                                                         |
|$res=            |CLI                   |${CLIBatch} AddAccount --System @SystemName --AccountName ${ManagedAccount} --Password \"${ManagedAccountPwd}\" --Description \"${ManagedAccountDescription}\" --MinimumApprovers 0|
|Verify_Contain_OR|$res;;successfully                                                                                                                                                                                        |

!|scenario        |Add Sync Password|Name          |with value          |value          |Check Profile         |checkprofile         |Change Profile         |changeprofile         |
|$res=            |CLI              |${CLIBatch} AddSyncPass --SyncPassName @Name --Password \"@value\"  --PasswordChangeProfile @changeprofile --PasswordCheckProfile @checkprofile|
|Verify_Contain_OR|$res;;${successCreateSyncPwd}                                                                                                                                    |

!|scenario        |Update Sync Password|Name           |with options           |newparamslist          |
|$res=            |CLI                 |${CLIBatch}  UpdateSyncPass --SyncPassName @Name @newparamslist|
|Verify_Contain_OR|$res;;successful                                                                    |

!|scenario        |Create Sync Pwd without profiles                                                                |
|$res=            |CLI|${CLIBatch} AddSyncPass --SyncPassName ${FakeSyncPwdName} --Password \"${FakeSyncPwdValue}\"|
|Verify_Contain_OR            |$res;;${successCreateSyncPwd}                                                                                                                       |
|List Sync Password properties|syncPassName,passwordCheckProfile,passwordChangeProfile|contains       |${FakeSyncPwdName}\s+${defaultCheckProfile}\s+${defaultChangeProfile}       |
|Delete Sync Password         |${FakeSyncPwdName}                                                                                                                                  |

!|scenario        |Create Sync Pwd without Check Profile                                                                                                           |
|$res=            |CLI|${CLIBatch} AddSyncPass --SyncPassName ${FakeSyncPwdName} --Password \"${FakeSyncPwdValue}\" --PasswordChangeProfile ${SyncPwdChangeProfile}|
|Verify_Contain_OR            |$res;;${successCreateSyncPwd}                                                                                                                                                                       |
|List Sync Password properties|syncPassName,passwordCheckProfile,passwordChangeProfile|contains                               |${FakeSyncPwdName}\s+${defaultCheckProfile}\s+${SyncPwdChangeProfile}                               |
|Delete Sync Password         |${FakeSyncPwdName}                                                                                                                                                                                  |

!|scenario        |Create Sync Pwd without Change Profile                                                                                                        |
|$res=            |CLI|${CLIBatch} AddSyncPass --SyncPassName ${FakeSyncPwdName} --Password \"${FakeSyncPwdValue}\" --PasswordCheckProfile ${SyncPwdCheckProfile}|
|Verify_Contain_OR            |$res;;${successCreateSyncPwd}                                                                                                                                                                     |
|List Sync Password properties|syncPassName,passwordCheckProfile,passwordChangeProfile|contains                              |${FakeSyncPwdName}\s+${SyncPwdCheckProfile}\s+${defaultChangeProfile}                              |
|Delete Sync Password         |${FakeSyncPwdName}                                                                                                                                                                                |

!|scenario        |Add Subscriber|account                             |from                            |system                            |
|$res=            |CLI           |${CLIBatch} AddSyncPwdSub --SyncPassName ${SyncPasswordName} --Systemname @system --AccountName @account|
|Verify_Contain_OR|$res;;successful                                                                                                       |

!|scenario        |Remove|sysName                          |
|$res=            |CLI   |${CLIBatch} DeleteSystem @sysName|
|Verify_Contain_OR|$res;;successful                        |

!|scenario        |Reset Sync Password to|newPassword                                                                                 |
|$res=            |CLI                   |${CLIBatch} SyncPassForceReset --SyncPassName ${SyncPasswordName} --NewPassword @newPassword|
|Verify_Contain_OR|$res;;subscribers have been scheduled for password resync                                                          |

!|scenario        |Set Sync Password Release Duration|time                                                                                 |
|$res=            |CLI                               |${CLIBatch} UpdateSyncPass --SyncPassName ${SyncPasswordName} --ReleaseDuration @time|
|Verify_Contain_OR|$res;;successfully                                                                                                      |

!|scenario        |Reset Sync Password                                                  |
|$res=            |CLI|${CLIBatch} SyncPassForceReset --SyncPassName ${SyncPasswordName}|
|Verify_Contain_OR|$res;;successfully                                                   |

!| scenario            |Request Password and Login                                     |
|Set User Permissions  |${CLI_user_1}                                                  |
|Set User Permissions  |${CLI_user_2}                                                  |
|pause                 |${ApplyNewPoliciesInterval}                                    |
|Request Pwd                                                                           |
|Approve Pwd                                                                           |
|$GeneratedPwd=        |CLI                |${CLIBatch} Retrieve --RequestID $RequestID|
|Login to second system|${SecSystemAddress}|with password        |$GeneratedPwd        |

!| scenario       |Check Sync Password|SyncPasswordName                     |
|$res=            |CLI                |${CLIBatch} ListSynchronizedPasswords|
|Verify_Contain_OR|$res;;@SyncPasswordName                                  |

!| scenario       |Check Sync Password|SyncPasswordName        |contains account       |accountName       |
|$res=            |CLI                |${CLIBatch} ListSyncPwdSubscribers --SyncPassName @SyncPasswordName|
|Verify_Contain_OR|$res;;@accountName                                                                     |

!| scenario       |Check Sync Password|SyncPasswordName|subscriber|accountName|from|system|status is|status|
|$res=            |CLI                |${CLIBatch} ListSyncPwdSubscribers --SyncPassName @SyncPasswordName |
|Verify_Contain_OR|$res;;@system\s+@accountName\s+[MY]\s+\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\s+@status      |


!| scenario       |Request Pwd                                                                                                                                |
|$res=            |CLI          |${CLIBatch} AddPwdRequest --SystemName ${SystemName} --AccountName ${ManagedAccount} --RequestNotes test --ReleaseDuration 15|
|Verify_Contain_OR|$res;;submitted                                                                                                                            |
|$RequestID=      |get_RequestID|$res                                                                                                                         |

!| scenario       |Set manual management for|accntname                    |from                    |sysname                   |
|$res=            |CLI                      |${CLIBatch} UpdateAccount --System @sysname --AccountName @accntname --AutoFlag M|
|Verify_Contain_OR|$res;;successful                                                                                           |

!| scenario       |Delete Sync Password|pwdName                                           |
|$res=            |CLI                 |${CLIBatch} DeleteSyncPass --SyncPassName @pwdName|
|Verify_Contain_OR|$res;;successfully deleted                                             |

!| scenario        |Unsubscribe manual pwd|accntName                               |from                               |sysname                              |
|$res=             |GroovyWebDriver       |manageSyncPwdManualSubscribers;${TPAMHost};${TPAMAdmin};${DefaultPwd};drop;${SyncPasswordName};@sysname;@accntName|
|Verify_Contain_NOT|$res;;something went wrong                                                                                                               |
|Verify_Contain_NOT|$res;;Priority field is found                                                                                                            |


!|scenario         |Subscribe manual pwd|accntName                               |from                              |sysname                              |
|$res=             |GroovyWebDriver     |manageSyncPwdManualSubscribers;${TPAMHost};${TPAMAdmin};${DefaultPwd};add;${SyncPasswordName};@sysname;@accntName|
|Verify_Contain_NOT|$res;;something went wrong                                                                                                            |
|Verify_Contain_NOT|$res;;Priority level field is enabled                                                                                                 |

!|scenario|Force Reset manual password|accnt                  |from                  |system                 |
|$clires= |CLI                        |${CLIBatch} ForceResetManual --SystemName @system --AccountName @accnt|
|$pwdID=  |PowerShellScript           |getPwdId.ps1 "$clires"                                                |

!|scenario        |Confirm Manual Password reset with status|status              |and result is              |result             |
|$res=            |CLI                                      |${CLIBatch} ManualPasswordReset --PasswordID $pwdID --Status @status|
|Verify_Contain_OR|$res;;@result                                                                                                 |

!|scenario         |Get Check Password button status for|accnt          |from         |system         |         |expectedRslt         |
|$res=             |GroovyWebDriver                     |getCheckPwdButtonStatus;${TPAMHost};${TPAMAdmin};${DefaultPwd};@system;@accnt|
|Verify_Contain_NOT|$res;;something went wrong                                                                                        |
|Verify_Contain_OR |$res;;@expectedRslt                                                                                               |

!|scenario  |Select Sync Password    |pname    |
|clickOnLink|link=Manage Synchronized Passwords|
|type;      |id=SyncPassNm           |@pname   |
|click      |id=Listing                        |
|click      |xpath=//tr[td='@pname']           |

!|scenario           |Check that there is no any scheduled Post Release Change                 |
|Select Sync Password|${SyncPasswordName}                                                      |
|$ScheduledChanges=  |getText|xpath=//tr[td='${SyncPasswordName}']/td[@name='ScheduledChanges']|
|Verify_Contain_NOT  |$ScheduledChanges;;Post Release                                          |

!|scenario           |Check that scheduled Post Release Change appears                         |
|Select Sync Password|${SyncPasswordName}                                                      |
|waitForElementPresent   |id=Logs                                                      |
|click                   |id=Logs                                                      |
|pause                   |500                                                          |
|click                   |id=rb_filterDt0                                              |
|click                   |id=ChangeLog                                                 |
|waitForElementPresent   |xpath=//table[@id='changeLogTable']                          |
|$ScheduledChanges=      |getText|xpath=//table[@id='changeLogTable']/tbody/tr[1]/td[2]|
|Verify_Contain_OR       |$ScheduledChanges;;Post Release Reset                        |
|$PostReleaseResetResult=|getText|xpath=//table[@id='changeLogTable']/*/tr[1]/td[3]    |
|Verify_Contain_OR       |$PostReleaseResetResult;;Success                             |

!|scenario         |Check subscriber check profile|expected                                                                                                    |
|$res =            |GroovyWebDriver               |checkCheckProfileControlledSyncPasswd;${TPAMHost};${TPAMAdmin};${DefaultPwd};${SystemName};${ManagedAccount}|
|Verify_Contain_NOT|$res;;something went wrong                                                                                                                 |
|Verify_Contain_OR |$res;;@expected                                                                                                                            |

