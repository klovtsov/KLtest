!|scenario        |Add System                                                                                                                                                                                                                                                     |
|$res=            |PowerShellScript|addSystem.ps1 ${psConnectOptions}  -systemName ${SystemName} -systemAddress ${SystemAddress} -platform "${SystemPlatform}" -description "${SystemDescription}" -timeout ${SystemTimeout} -functAcct ${FunctAcct} -functAcctPwd ${FunctAcctPwd}|
|Verify_Contain_OR|$res;;successful                                                                                                                                                                                                                                               |

!|scenario        |Add system      |systemName       |with address       |sysaddress       |platform       |platform       |managed by      |funcAcc      |additional parameters      |parameters      |
|$res=            |PowerShellScript|addSystem.ps1 ${psConnectOptions}  -systemName @systemName -systemAddress @sysaddress -platform @platform -timeout ${SystemTimeout} -functAcct @funcAcc @parameters|
|Verify_Contain_OR|$res;;successful                                                                                                                                                                    |

!|scenario        |Add system      |systemName         |with address         |sysaddress        |platform        |platform        |additional parameters        |parameters        |
|$res=            |PowerShellScript|addSystem.ps1 ${psConnectOptions}  -systemName @systemName -systemAddress @sysaddress -platform @platform -timeout ${SystemTimeout} @parameters|
|Verify_Contain_OR|$res;;successful                                                                                                                                                |

!|scenario        |Try to Add system|systemName   |with parameters   |params   |with result   |result  |
|$res=            |PowerShellScript |addSystem.ps1 ${psConnectOptions}  -systemName @systemName @params|
|Verify_Contain_OR|$res;;@result                                                                       |

!|scenario        |Update System   |systemName               |               |updateValues               |by user              |user              |
|$res=            |PowerShellScript|updateSystem.ps1 -tpamAddress ${TPAMHost} -keyFile @user -apiUser @user  -systemName @systemName @updateValues|
|Verify_Contain_OR|$res;;System changes for @systemName saved successfully                                                                        |

!|scenario        |List Systems     contains|system                                                          |
|$res=            |PowerShellScript         |listSystems.ps1 ${psConnectOptions}  -platform ${SystemPlatform}|
|Verify_Contain_OR|$res;;@system                                                                             |

!|scenario        |List Systems by |filter     |output params     |out     |contain    |result    |
|$res=            |PowerShellScript|listSystems.ps1 ${psConnectOptions}  @filter -propsToList @out|
|Verify_Contain_OR|$res;;@result                                                                  |

!|scenario        |List Accounts by filter|filter        |contains       |result       |
|$res=            |PowerShellScript       |listAccounts.ps1 ${psConnectOptions} @filter|
|Verify_Contain_OR|$res;;@result                                                       |

!|scenario        |Check Reason Code|codeName                               |
|$res=            |PowerShellScript |listReasonCodes.ps1 ${psConnectOptions}|
|Verify_Contain_OR|$res;;@codeName                                          |

!|scenario        |Delete Account  |accountToDel                                                                               |
|$res=            |PowerShellScript|deleteAccount.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName @accountToDel|
|Verify_Contain_OR|$res;;successful                                                                                            |

!|scenario        |Try to Delete Account|accountToDel        |on system        |sysName        |with result        |rslt       |
|$res=            |PowerShellScript     |deleteAccount.ps1 ${psConnectOptions}  -systemName @sysName -accountName @accountToDel|
|Verify_Contain_OR|$res;;@rslt                                                                                                 |

!|scenario        |Test System     |result                                           |
|$res=            |PowerShellScript|testSystem.ps1 ${psConnectOptions}  ${SystemName}|
|Verify_Contain_OR|$res;;@result                                                     |

!|scenario        |Test System     |systemname      |with result      |result      |
|$res=            |PowerShellScript|testSystem.ps1 ${psConnectOptions}  @systemname|
|Verify_Contain_OR|$res;;@result                                                   |

!|scenario        |Add Account     |account                     |on                    |system                    |with password                    |acntPwd                    |
|$res=            |PowerShellScript|addAccount.ps1 ${psConnectOptions}  -systemName @system -accountName @account -description "${ManagedAccountDescription}" -Password @acntPwd|
|Verify_Contain_OR|$res;;successful                                                                                                                                             |

!|scenario        |Add account     |accountName                                       |with password                                       |accountPwd                                       |
|$res=            |PowerShellScript|addAccount.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName @accountName -description "${ManagedAccountDescription}" -Password @accountPwd|
|Verify_Contain_OR|$res;;successful                                                                                                                                                          |

!|scenario        |Add account     |account               |on system               |system               |by user               |user              |
|$res=            |PowerShellScript|addAccount.ps1 -tpamAddress ${TPAMHost} -keyFile @user -apiUser @user -systemName @system -accountName @account|
|Verify_Contain_OR|$res;;successful                                                                                                                |

!|scenario        |Add account     |account         |on system        |system        |with options        |optionlist        |
|$res=            |PowerShellScript|addAccount.ps1 ${psConnectOptions}  -systemName @system -accountName @account @optionlist|
|Verify_Contain_OR|$res;;successful                                                                                          |

!|scenario        |Try to Add account|account    |on system   |system   |with options   |optionlist   |with result   |result   |
|$res=            |PowerShellScript  |addAccount.ps1 ${psConnectOptions}  -systemName @system -accountName @account @optionlist|
|Verify_Contain_OR|$res;;@result                                                                                               |

!|scenario        |Check Password  |result                                                                                         |
|$res=            |PowerShellScript|checkPassword.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName ${ManagedAccount}|
|Verify_Contain_OR|$res;;@result                                                                                                   |

!|scenario        |Reset Password  |result                                                                                      |
|$res=            |PowerShellScript|ForceReset.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName ${ManagedAccount}|
|Verify_Contain_OR|$res;;@result                                                                                                |

!|scenario        |Reset Password  |account        |from system        |sysname        |with        |result       |
|$res=            |PowerShellScript|ForceReset.ps1 ${psConnectOptions}  -systemName @sysname -accountName @account|
|Verify_Contain_OR|$res;;@result                                                                                  |

!|scenario     |Schedule Reset Password|testResult                                                                                                                                                      |
|$Hours=       |getEval                |var d = new Date();d.setUTCMinutes(d.getUTCMinutes()+1);var s = d.getUTCHours();if ((s + "").length == 1) s = "0" + s;else d.getUTCHours();                     |
|$Minutes=     |getEval                |var d = new Date();d.setUTCMinutes(d.getUTCMinutes()+1);var s = d.getUTCMinutes();if ((s + "").length == 1) s = "0" + s;else d.getUTCMinutes();                 |
|$Months=      |getEval                |var d = new Date();d.setUTCMinutes(d.getUTCMinutes()+1);var s = d.getUTCMonth()+1;if ((s + "").length == 1) s = "0" + s;else d.getUTCMonth()+1;                 |
|$Days=        |getEval                |var d = new Date();d.setUTCMinutes(d.getUTCMinutes()+1);var s = d.getUTCDate();if ((s + "").length == 1) s = "0" + s;else d.getUTCDate();                       |
|$Years=       |getEval                |var d = new Date();d.setUTCMinutes(d.getUTCMinutes()+1);d.getUTCFullYear();                                                                                     |
|$res=         |PowerShellScript       |updateAccount.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName ${ManagedAccount} -changeTime $Hours,$Minutes -NextChangeDate $Years,$Months,$Days|
|pause         |240000                                                                                                                                                                                  |
|Check Password|@testResult                                                                                                                                                                             |

!|scenario|Force Reset manual password                                                                                        |
|$clires= |PowerShellScript|ForceResetManual.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName ${ManagedAccount}|
|$pwdID=  |PowerShellScript|getPwdId.ps1 "$clires"                                                                            |

!|scenario        |Confirm Manual Password reset with status|status          |and result is          |expected          |
|$res=            |PowerShellScript                         |manualPasswordReset.ps1 ${psConnectOptions} $pwdID @status|
|Verify_Contain_OR|$res;;@expected                                                                                      |

!|scenario        |Try to Update Account|account            |            |params            |by user            |user            |with result           |result           |
|$res=            |PowerShellScript     |updateAccount.ps1 -tpamAddress ${TPAMHost} -keyFile @user -apiUser @user  -systemName ${SystemName} -accountName @account @params|
|Verify_Contain_OR|$res;;@result                                                                                                                                          |

!|scenario        |Try to Update System|system        |        |params        |by user        |user       |with result       |result       |
|$res=            |PowerShellScript    |updateSystem.ps1 -tpamAddress ${TPAMHost} -keyFile @user -apiUser @user -systemName @system @params|
|Verify_Contain_OR|$res;;@result                                                                                                           |

!|scenario        |Set Permissions |policy                     |on  account                     |accountName                    |for user                    |username                    |
|$res=            |PowerShellScript|setAccessPolicy.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName @accountName -Action ADD -AccessPolicyName @policy -UserName @username|
|Verify_Contain_OR|$res;;successful                                                                                                                                                       |

!|scenario        |Set Permissions |policy                |on system                |systemName               |for user               |username               |
|$res=            |PowerShellScript|setAccessPolicy.ps1 ${psConnectOptions}  -systemName @systemName -Action ADD -AccessPolicyName @policy -UserName @username|
|Verify_Contain_OR|$res;;successful                                                                                                                           |

!|scenario        |Set Permissions |policy                     |on  account                     |accountName                    |for group                    |groupName                    |
|$res=            |PowerShellScript|setAccessPolicy.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName @accountName -Action ADD -AccessPolicyName @policy -GroupName @groupName|
|Verify_Contain_OR|$res;;successful                                                                                                                                                         |

!|scenario        |Set Permissions |policy                |on system                |systemName               |for group               |groupName               |
|$res=            |PowerShellScript|setAccessPolicy.ps1 ${psConnectOptions}  -systemName @systemName -Action ADD -AccessPolicyName @policy -GroupName @groupName|
|Verify_Contain_OR|$res;;successful                                                                                                                             |

!|scenario        |Revoke Permissions|policy                     |on  account                     |accountName                     |for user                    |username                    |
|$res=            |PowerShellScript  |setAccessPolicy.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName @accountName -Action DROP -AccessPolicyName @policy -UserName @username|
|Verify_Contain_OR|$res;;successful                                                                                                                                                          |

!|scenario        |Revoke Permissions|policy                |on system                |systemName                |for user               |username               |
|$res=            |PowerShellScript  |setAccessPolicy.ps1 ${psConnectOptions}  -systemName @systemName -Action DROP -AccessPolicyName @policy -UserName @username|
|Verify_Contain_OR|$res;;successful                                                                                                                              |

!|scenario        |Revoke Permissions|policy                     |on  account                     |accountName                     |for group                    |groupName                    |
|$res=            |PowerShellScript  |setAccessPolicy.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName @accountName -Action DROP -AccessPolicyName @policy -GroupName @groupName|
|Verify_Contain_OR|$res;;successful                                                                                                                                                            |

!|scenario        |Revoke Permissions|policy                |on system                |systemName                |for group               |groupName               |
|$res=            |PowerShellScript  |setAccessPolicy.ps1 ${psConnectOptions}  -systemName @systemName -Action DROP -AccessPolicyName @policy -GroupName @groupName|
|Verify_Contain_OR|$res;;successful                                                                                                                                |


!|scenario        |Set Permissions |policy                |on collection                |collectionName               |for group               |groupName               |
|$res=            |PowerShellScript|setAccessPolicy.ps1 ${psConnectOptions}  -CollectionName @collectionName -Action ADD -AccessPolicyName @policy -GroupName @groupName|
|Verify_Contain_OR|$res;;successful                                                                                                                                     |

!|scenario        |Set Permissions |policy                |on collection                |collectionName                |for user               |user               |
|$res=            |PowerShellScript|setAccessPolicy.ps1 ${psConnectOptions}  -CollectionName @collectionName -Action ADD -AccessPolicyName @policy  -UserName @user|
|Verify_Contain_OR|$res;;successful                                                                                                                                |

!|scenario        |Revoke Permissions|policy                |on collection                |collectionName                |for user                |user               |
|$res=            |PowerShellScript  |setAccessPolicy.ps1 ${psConnectOptions}  -CollectionName @collectionName -Action DROP -AccessPolicyName @policy  -UserName @user|
|Verify_Contain_OR|$res;;successful                                                                                                                                   |

!|scenario        |Revoke Permissions|policy                |on collection                |collectionName                |for group                |groupName               |
|$res=            |PowerShellScript  |setAccessPolicy.ps1 ${psConnectOptions}  -CollectionName @collectionName -Action DROP -AccessPolicyName @policy  -GroupName @groupName|
|Verify_Contain_OR|$res;;successful                                                                                                                                         |

!|scenario        |Request Pwd by  |user                                                                                                                                                |
|$res=            |PowerShellScript|addPwdRequest.ps1 -tpamAddress ${TPAMHost} -keyFile @user -apiUser @user -systemName ${SystemName} -accountName ${ManagedAccount} -RequestNotes test|
|Verify_Contain_OR|$res;;submitted                                                                                                                                                      |
|$RequestID=      |get_RequestID   |$res                                                                                                                                                |

!|scenario        |Request Pwd by  |user                                        |with additional conditions                                       |conditions                                       |
|$res=            |PowerShellScript|addPwdRequest.ps1 -tpamAddress ${TPAMHost} -keyFile @user -apiUser @user -systemName ${SystemName} -accountName ${ManagedAccount} -RequestNotes test @conditions|
|Verify_Contain_OR|$res;;submitted                                                                                                                                                                  |
|$RequestID=      |get_RequestID   |$res                                                                                                                                                            |

!|scenario        |Try to Request Pwd by|user                                          |with result                                          |result                                         |
|$res=            |PowerShellScript     |addPwdRequest.ps1 -tpamAddress ${TPAMHost} -keyFile @user -apiUser @user -systemName ${SystemName} -accountName ${ManagedAccount} -RequestNotes test|
|Verify_Contain_OR|$res;;@result                                                                                                                                                             |

!|scenario        |Try to Request Pwd|account                    |by user                    |user                    |with result                    |result                    |
|$res=            |PowerShellScript  |addPwdRequest.ps1 -tpamAddress ${TPAMHost} -keyFile @user -apiUser @user -systemName ${SystemName} -accountName @account -RequestNotes test|
|Verify_Contain_OR|$res;;@result                                                                                                                                                 |

!|scenario        |Get Password Request Status|expectedStatus                                             |
|$res=            |PowerShellScript           |GetPwdRequest.ps1 ${psConnectOptions} -RequestID $RequestID|
|Verify_Contain_OR|$res;;@expectedStatus                                                                  |

!|scenario        |Approve Pwd by  |user                                                                                                        |
|$res=            |PowerShellScript|approvePwd.ps1 -tpamAddress ${TPAMHost} -keyFile @user -apiUser @user -RequestID $RequestID -Comment Kharaso|
|Verify_Contain_OR|$res;;submitted                                                                                                              |

!|scenario        |Cancel Request by|user                                                                                                    |
|$res=            |PowerShellScript |cancel.ps1 -tpamAddress ${TPAMHost} -keyFile @user -apiUser @user -RequestID $RequestID -Comment Kharaso|
|Verify_Contain_OR|$res;;submitted                                                                                                           |

!| scenario             |Get Login                                                                       |
|$GeneratedPwd=         |PowerShellScript|retrievePassword.ps1 ${psConnectOptions}  -RequestID $RequestID|
|Login Account to System|$GeneratedPwd                                                                   |

!|scenario     |Retrieve Account Password                                                       |
|$GeneratedPwd=|PowerShellScript|retrievePassword.ps1 ${psConnectOptions}  -RequestID $RequestID|

!| scenario       |Add User        |username                                                                         |
|$res=            |PowerShellScript|addUser.ps1 ${psConnectOptions}  -userName @username -firstname Joe -lastname Doe|
|Verify_Contain_OR|$res;;successful                                                                                  |

!| scenario       |Add User        |name                         |usertype                         |type                         |
|$res=            |PowerShellScript|addUser.ps1 ${psConnectOptions}  -userName @name -firstname Joe -lastname Doe -usertype @type|
|Verify_Contain_OR|$res;;successful                                                                                              |

!| scenario       |Add User        |name               |usertype               |type              |with password              |pwd              |
|$res=            |PowerShellScript|addUser.ps1 ${psConnectOptions}  -userName @name -firstname Joe -lastname Doe -usertype @type -Password @pwd|
|Verify_Contain_OR|$res;;successful                                                                                                             |

!| scenario       |Add User        |user                                |with options                               |params                               |
|$res=            |PowerShellScript|addUser.ps1 ${psConnectOptions}  -userName @user -firstname ${TestUserFirstName} -lastname ${TestUserLastName} @params|
|Verify_Contain_OR|$res;;successful                                                                                                                       |

!| scenario       |Try to Add User |user                |with options               |params               |and result               |result               |
|$res=            |PowerShellScript|addUser.ps1 ${psConnectOptions}  -userName @user -firstname ${TestUserFirstName} -lastname ${TestUserLastName} @params|
|Verify_Contain_OR|$res;;@result                                                                                                                          |

!| scenario       |Update User     |user                |                |params               |
|$res=            |PowerShellScript|updateUser.ps1 ${psConnectOptions}  -userName @user @params|
|Verify_Contain_OR|$res;;successful                                                            |

!| scenario       |Delete User     |username                                               |
|$res=            |PowerShellScript|deleteUser.ps1 ${psConnectOptions}  -userName @username|
|Verify_Contain_OR|$res;;successful                                                        |

!| scenario       |Change User Pwd |username                      |                      |newPwd                     |
|$res=            |PowerShellScript|changeUserPassword.ps1 ${psConnectOptions}  -userName @username -password @newPwd|
|Verify_Contain_OR|$res;;successful                                                                                  |

!| scenario       |Unlock User     |uname                                               |
|$res=            |PowerShellScript|unlockUser.ps1 ${psConnectOptions}  -userName @uname|
|Verify_Contain_OR|$res;;successful                                                     |

!| scenario       |Add Group       |groupname                                                                                 |
|$res=            |PowerShellScript|addGroup.ps1 ${psConnectOptions}  -groupName @groupname -description "${groupDescription}"|
|Verify_Contain_OR|$res;;successful                                                                                           |

!| scenario       |Add Member      |userName                  |to group                  |groupName                  |
|$res=            |PowerShellScript|addGroupMember.ps1 ${psConnectOptions}  -userName @userName -groupName @groupName|
|Verify_Contain_OR|$res;;successful                                                                                  |

!| scenario       |Drop Member     |userName                  |from group                  |groupName                 |
|$res=            |PowerShellScript|dropGroupMember.ps1 ${psConnectOptions}  -userName @userName -groupName @groupName|
|Verify_Contain_OR|$res;;successful                                                                                   |

!| scenario       |Delete Group    |groupname                                               |
|$res=            |PowerShellScript|dropGroup.ps1 ${psConnectOptions}  -groupName @groupname|
|Verify_Contain_OR|$res;;successful                                                         |

!| scenario       |List Groups by filter|filter    |and result contains   |result   |
|$res=            |PowerShellScript     |listGroups.ps1 ${psConnectOptions}  @filter|
|Verify_Contain_OR|$res;;@result                                                    |

!| scenario       |List Policies by filter|filter           |contains          |result          |
|$res=            |PowerShellScript       |ListAssignedPolicies.ps1 ${psConnectOptions}  @filter|
|Verify_Contain_OR|$res;;@result                                                                |

!| scenario        |List Policies by filter|filter        |does not contains       |result       |
|$res=             |PowerShellScript       |ListAssignedPolicies.ps1 ${psConnectOptions}  @filter|
|Verify_Contain_NOT|$res;;@result                                                                |

!| scenario       |List Groups Membership by filter|filter       |and result contains      |result      |
|$res=            |PowerShellScript                |listGroupMembership.ps1 ${psConnectOptions}  @filter|
|Verify_Contain_OR|$res;;@result                                                                        |

!| scenario        |List Groups Membership by filter|filter    |and result does not contain    |result   |
|$res=             |PowerShellScript                |listGroupMembership.ps1 ${psConnectOptions}  @filter|
|Verify_Contain_NOT|$res;;@result                                                                        |

!| scenario       |Add Collection  |collName                                                                                          |
|$res=            |PowerShellScript|addCollection.ps1 ${psConnectOptions}  -collectionName @collName -description "${collDescription}"|
|Verify_Contain_OR|$res;;successful                                                                                                   |

!|scenario        |Add System      |systemname                     |to collection                    |collName                    |
|$res=            |PowerShellScript|addCollectionMember.ps1 ${psConnectOptions}  -collectionName @collName -systemName @systemname|
|Verify_Contain_OR|$res;;successful                                                                                               |

!|scenario        |Add Account     |accountName             |from system             |systemname             |to collection            |collName            |
|$res=            |PowerShellScript|addCollectionMember.ps1 ${psConnectOptions}  -collectionName @collName -systemName @systemname -accountName @accountName|
|Verify_Contain_OR|$res;;successful                                                                                                                         |

!|scenario        |List Collection by filter|filter     |and result contains     |pattern    |
|$res=            |PowerShellScript         |listCollections.ps1 ${psConnectOptions}  @filter|
|Verify_Contain_OR|$res;;@pattern                                                            |

!|scenario        |List Collection Membership by filter|filter        |and result contains        |pattern       |
|$res=            |PowerShellScript                    |listCollectionMembership.ps1 ${psConnectOptions}  @filter|
|Verify_Contain_OR|$res;;@pattern                                                                                |

!|scenario        |Delete Collection|collName                                                     |
|$res=            |PowerShellScript |dropCollection.ps1 ${psConnectOptions}  -collection @collName|
|Verify_Contain_OR|$res;;successful                                                               |

!|scenario        |Drop Account    |accName                            |from collection                            |collName                           |
|$res=            |PowerShellScript|dropCollectionMember.ps1 ${psConnectOptions}  -collection @collName -systemName ${SystemName} -accountName @accName|
|Verify_Contain_OR|$res;;Collection Membership changes saved successfully                                                                              |

!|scenario         |List Collection Membership by filter|filter     |and result does not contain     |pattern     |
|$res=             |PowerShellScript                    |listCollectionMembership.ps1 ${psConnectOptions}  @filter|
|Verify_Contain_NOT|$res;;@pattern                                                                                |

!|scenario        |List User by filter|filter   |and result contains   |pattern  |
|$res=            |PowerShellScript   |listUsers.ps1 ${psConnectOptions}  @filter|
|Verify_Contain_OR|$res;;@pattern                                                |

!|scenario        |List properties |propertyList       |for user       |username       |contains       |result      |
|$res=            |PowerShellScript|listUsers.ps1 ${psConnectOptions} -userName @username -propsToList @propertyList|
|Verify_Contain_OR|$res;;@result                                                                                    |

!|scenario        |List Systems depended from|account                 |                 |system                |contains                |pattern                |
|$res=            |PowerShellScript          |listDependentSystems.ps1 ${psConnectOptions}  -systemName @system -accountName @account -dependentStatus Dependent|
|Verify_Contain_OR|$res;;@pattern                                                                                                                               |


!|scenario        |List Systems undepended from|account                      |                      |system                      |contains                      |pattern                      |
|$res=            |PowerShellScript            |listDependentSystems.ps1 ${psConnectOptions}  -systemName @system -accountName @account -dependentStatus NOT_DEPENDENT -dependentName @pattern|
|Verify_Contain_OR|$res;;@pattern                                                                                                                                                             |

!|scenario        |Assign          |systemname                           |as dependent from                          |account                          |
|$res=            |PowerShellScript|updateDependentSystems.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName @account -assign @systemname|
|Verify_Contain_OR|$res;;Dependent Systems changes saved successfully                                                                                  |

!|scenario        |Unassign        |systemname                           |as dependent from                           |account                           |
|$res=            |PowerShellScript|updateDependentSystems.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName @account -unassign @systemname|
|Verify_Contain_OR|$res;;Dependent Systems changes saved successfully                                                                                    |

!|scenario        |Delete system   |systemname                                                   |
|$res=            |PowerShellScript|deleteSystem.ps1 ${psConnectOptions}  -systemName @systemname|
|Verify_Contain_OR|$res;;successful                                                              |

!|scenario        |Try to delete system|systemname           |with result           |result          |
|$res=            |PowerShellScript    |deleteSystem.ps1 ${psConnectOptions}  -systemName @systemname|
|Verify_Contain_OR|$res;;@result                                                                     |

!|scenario        |List Request    |result                                                                                                                    |
|$res=            |PowerShellScript|listRequest.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName ${ManagedAccount} -requestorName "User=Myself"|
|Verify_Contain_OR|$res;;@result                                                                                                                              |

!|scenario        |List Request Details                                                                                                                                            |
|$Months=         |getEval         |var d = new Date();d.setUTCMinutes(d.getUTCMinutes()+1);var s = d.getUTCMonth()+1;if ((s + "").length == 1) s = "0" + s;else d.getUTCMonth()+1;|
|$Days=           |getEval         |var d = new Date();d.setUTCMinutes(d.getUTCMinutes()+1);var s = d.getUTCDate();if ((s + "").length == 1) s = "0" + s;else d.getUTCDate();      |
|$Years=          |getEval         |var d = new Date();d.setUTCMinutes(d.getUTCMinutes()+1);d.getUTCFullYear();                                                                    |
|$Hours=          |getEval         |var d = new Date();d.setUTCMinutes(d.getUTCMinutes()+1);var s = d.getUTCHours();if ((s + "").length == 1) s = "0" + s;else d.getUTCHours();    |
|$res=            |PowerShellScript|listRequestDetails.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName ${ManagedAccount} -requestorName "User=Myself"              |
|Verify_Contain_OR|$res;;$RequestID.*$Years-$Months-$Days.*$Hours                                                                                                                  |

!|scenario        |List Accounts for Password request for|user                             |contains                             |result                             |
|$res=            |PowerShellScript                      |listAcctsForPwdRequest.ps1 -tpamAddress ${TPAMHost} -keyFile @user -apiUser @user -systemName ${SystemName}|
|Verify_Contain_OR|$res;;@result                                                                                                                                     |

!|scenario        |List PSM Accounts|accfilter            |for which PSM enabled            |psmflag            |contains            |pattern           |
|$res=            |PowerShellScript |listPSMAccounts.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName @accfilter -accountPSMFlag @psmflag|
|Verify_Contain_OR|$res;;@pattern                                                                                                                       |

!|scenario        |List PSM Accounts|accfilter     |from system     |sysname     |properties to list     |properties     |contains     |pattern    |
|$res=            |PowerShellScript |listPSMAccounts.ps1 ${psConnectOptions}  -systemName @sysname -accountName @accfilter -propsToList @properties|
|Verify_Contain_OR|$res;;@pattern                                                                                                                  |

!|scenario         |List PSM Accounts|accfilter           |for which PSM enabled          |psmflag          |does not contain          |pattern          |
|$res=             |PowerShellScript |listPSMAccounts.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName @accfilter -accountPSMFlag @psmflag|
|Verify_Contain_NOT|$res;;@pattern                                                                                                                       |

!|scenario        |Enable PSM for  |accountName                            |with options                            |options                            |
|$res=            |PowerShellScript|updatePSMAccount.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName @accountName -enableFlag Y @options|
|Verify_Contain_OR|$res;;PSM Details saved successfully                                                                                                 |

!|scenario        |Enable PSM for  |accountName             |on system            |systemName            |with options            |options            |
|$res=            |PowerShellScript|updatePSMAccount.ps1 ${psConnectOptions}  -systemName @systemName -accountName @accountName -enableFlag Y @options|
|Verify_Contain_OR|$res;;PSM Details saved successfully                                                                                               |

!|scenario        |Update PSM settings for|accountName          |on system          |systemName         |with options         |options         |
|$res=            |PowerShellScript       |updatePSMAccount.ps1 ${psConnectOptions}  -systemName @systemName -accountName @accountName @options|
|Verify_Contain_OR|$res;;PSM Details saved successfully                                                                                        |

!|scenario        |List Accounts for Session request for|user                               |contains                              |result                              |
|$res=            |PowerShellScript                     |listAcctsForSessionRequest.ps1 -tpamAddress ${TPAMHost} -keyFile @user -apiUser @user -systemName ${SystemName}|
|Verify_Contain_OR|$res;;@result                                                                                                                                        |

!|scenario        |Request Session for|webuser                                                                                                                                     |
|$res=            |PowerShellScript   |addSessionRequest.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName ${ManagedAccount} -requestNotes test -forUserName @webuser|
|Verify_Contain_OR|$res;;Request.*for a PSM Session.*has been submitted                                                                                                            |
|$RequestID=      |get_RequestID      |$res                                                                                                                                        |

!|scenario        |List Session Request|requestor                                 |with result                                 |result                                |
|$res=            |PowerShellScript    |listSessionRequest.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName ${ManagedAccount} -requestorName @requestor|
|Verify_Contain_OR|$res;;@result                                                                                                                                      |

!|scenario        |Get Session Request Status|expectedStatus                                                 |
|$res=            |PowerShellScript          |GetSessionRequest.ps1 ${psConnectOptions} -RequestID $RequestID|
|Verify_Contain_OR|$res;;@expectedStatus                                                                     |

!|scenario        |Get Session Request with|ID           |status           |expectedStatus          |
|$res=            |PowerShellScript        |GetSessionRequest.ps1 ${psConnectOptions} -RequestID @ID|
|Verify_Contain_OR|$res;;@expectedStatus                                                            |

!|scenario        |List Session Request Details                                                                                                                                    |
|$Months=         |getEval         |var d = new Date();d.setUTCMinutes(d.getUTCMinutes()+1);var s = d.getUTCMonth()+1;if ((s + "").length == 1) s = "0" + s;else d.getUTCMonth()+1;|
|$Days=           |getEval         |var d = new Date();d.setUTCMinutes(d.getUTCMinutes()+1);var s = d.getUTCDate();if ((s + "").length == 1) s = "0" + s;else d.getUTCDate();      |
|$Years=          |getEval         |var d = new Date();d.setUTCMinutes(d.getUTCMinutes()+1);d.getUTCFullYear();                                                                    |
|$Hours=          |getEval         |var d = new Date();d.setUTCMinutes(d.getUTCMinutes()+1);var s = d.getUTCHours();if ((s + "").length == 1) s = "0" + s;else d.getUTCHours();    |
|$res=            |PowerShellScript|listSessionRequestDetails.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName ${ManagedAccount}                                    |
|Verify_Contain_OR|$res;;$RequestID.*$Years-$Months-$Days.*$Hours                                                                                                                  |

!|scenario        |Cancel Session Request                                                                          |
|$res=            |PowerShellScript|cancelSessionRequest.ps1 ${psConnectOptions}  -requestID $RequestID -comment Ok|
|Verify_Contain_OR|$res;;successful                                                                                |

!|scenario        |Approve Session request by|user                                                                                                                   |
|$res=            |PowerShellScript          |approveSessionRequest.ps1 -tpamAddress ${TPAMHost} -keyFile @user -apiUser @user -RequestID $RequestID -Comment Kharaso|
|Verify_Contain_OR|$res;;submitted                                                                                                                                   |

!|scenario        |Approve Session request with|Id                                  |by                                  |user                                  |
|$res=            |PowerShellScript            |approveSessionRequest.ps1 -tpamAddress ${TPAMHost} -keyFile @user -apiUser @user -RequestID @Id -Comment Kharaso|
|Verify_Contain_OR|$res;;submitted                                                                                                                              |

!|scenario        |Report Activity for user|userName                                                                                                                                               |operation|operation|objectType|object|from|start|and result contains|pattern|
|$res=            |PowerShellScript        |reportActivity.ps1 ${psConnectOptions} -userName @userName -operation @operation -objectType @object -startDate @start -sort Time -direction DESCENDING|                                                                            |
|Verify_Contain_OR|$res;;@pattern                                                                                                                                                                                                                                               |

!3 Synchronized password scenarios
!|scenario        |Add Sync Password|pwdName                 |with value                 |pwdValue                 |
|$res=            |PowerShellScript |AddSyncPass.ps1 ${psConnectOptions} -syncPassName @pwdName -Password @pwdValue|
|Verify_Contain_OR|$res;;Synchronized Password Created successfully                                                |

!|scenario        |Add Subscriber  |subscriber                                |from                                |system                               |
|$res=            |PowerShellScript|AddSyncPwdSub.ps1 ${psConnectOptions} -syncPassName ${SyncPasswordName} -Systemname @system --AccountName @subscriber|
|Verify_Contain_OR|$res;;New subscribers added successfully                                                                                              |

!|scenario        |Reset Sync Password to|newValue                                                                                           |
|$res=            |PowerShellScript      |SyncPassForceReset.ps1 ${psConnectOptions} -syncPassName ${SyncPasswordName} -NewPassword @newValue|
|Verify_Contain_OR|$res;;subscribers have been scheduled for password resync                                                                 |

!|scenario        |Delete Sync Password|PwdName                                                                 |
|$res=            |PowerShellScript    |DeleteSyncPass.ps1 ${psConnectOptions} -syncPassName ${SyncPasswordName}|
|Verify_Contain_OR|$res;;successfully deleted                                                                   |

!| scenario       |Check Sync Password|SyncPasswordName                                 |
|$res=            |PowerShellScript   |ListSynchronizedPasswords.ps1 ${psConnectOptions}|
|Verify_Contain_OR|$res;;@SyncPasswordName                                              |

!| scenario       |Check Sync Password|@SyncPasswordName           |contains account           |accountName          |
|$res=            |PowerShellScript   |ListSyncPwdSubscribers.ps1 ${psConnectOptions} -syncPassName @SyncPasswordName|
|Verify_Contain_OR|$res;;@accountName                                                                                |

!| scenario       |Drop account from Sync Password|account                                |from                                |system                               |
|$res=            |PowerShellScript               |DropSyncPwdSub.ps1 ${psConnectOptions} -syncPassName ${SyncPasswordName} -systemName @system -accountName @account|
|Verify_Contain_OR|$res;;successfully                                                                                                                                |

!| scenario       |Set Sync Password Release Duration|Duration                                                                                                                |
|$res=            |PowerShellScript                  |UpdateSyncPass.ps1 ${psConnectOptions} -syncPassName ${SyncPasswordName} -ReleaseChangeFlag Y -ReleaseDuration @Duration|
|Verify_Contain_OR|$res;;successfully                                                                                                                                         |

!| scenario     |Set Permissions on account|account                                    |
|Set Permissions|"PPM Requestor"           |on  account|@account|for user|${API_user_1}|
|Set Permissions|"PPM Approver"            |on  account|@account|for user|${API_user_2}|
|pause          |${ApplyNewPoliciesInterval}                                           |

!| scenario    |Retrieve Password                                                               |
|Request Pwd by|${API_user_1}                                                                   |
|Approve Pwd by|${API_user_2}                                                                   |
|$GeneratedPwd=|PowerShellScript|retrievePassword.ps1 ${psConnectOptions}  -RequestID $RequestID|

!| scenario       |Set Sync Password Release Change|setting                                                                                             |
|$res=            |PowerShellScript                |UpdateSyncPass.ps1 ${psConnectOptions} -syncPassName ${SyncPasswordName} -ReleaseChangeFlag @setting|
|Verify_Contain_OR|$res;;successfully                                                                                                                   |

!| scenario        |Check Sync Password doesn't have scheduled post release change    |
|$res=             |PowerShellScript|ListSynchronizedPasswords.ps1 ${psConnectOptions}|
|Verify_Contain_NOT|$res;;${SyncPasswordName}.*Post Release                           |

!| scenario       |Check Sync Password has scheduled post release change             |
|$res=            |PowerShellScript|ListSynchronizedPasswords.ps1 ${psConnectOptions}|
|Verify_Contain_OR|$res;;${SyncPasswordName}.*Post Release                           |

!| scenario|Lock User |uname            |
|Login     |${TPAMURL}||@uname||Wr0ngPwd|
|Login     |${TPAMURL}||@uname||Wr0ngPwd|
|Login     |${TPAMURL}||@uname||Wr0ngPwd|
|Login     |${TPAMURL}||@uname||Wr0ngPwd|
|Login     |${TPAMURL}||@uname||Wr0ngPwd|
|Login     |${TPAMURL}||@uname||Wr0ngPwd|

!| scenario       |Set Change Frequency|value                                                                                                             |
|$res=            |PowerShellScript    |updateAccount.ps1 ${psConnectOptions}  -systemName ${SystemName} -accountName ${ManagedAccount} -changeFreq @value|
|Verify_Contain_OR|$res;;successfull                                                                                                                      |

!3 WebDriver scenarios
!|scenario        |Check Global Setting is|result                                |
|$res=            |GroovyWebDriver        |IgnoreSystemPolicyGS;${TPAMHost};check|
|Verify_Contain_OR|$res;;GS is @result                                           |

!|scenario        |Turn On Global Setting                                 |
|$res=            |GroovyWebDriver|IgnoreSystemPolicyGS;${TPAMHost};turnOn|
|Verify_Contain_OR|$res;;GS was changed to ON                             |

!|scenario        |Turn Off Global Setting                                 |
|$res=            |GroovyWebDriver|IgnoreSystemPolicyGS;${TPAMHost};turnOff|
|Verify_Contain_OR|$res;;GS was changed to OFF                             |

!|scenario        |Create fake external auth system|sysname                                                      |
|$res=            |GroovyWebDriver                 |manageExtAuthSystem;${TPAMHost};create;@sysname;10.30.201.202|
|Verify_Contain_OR|$res;;Successful;;System already exists                                                       |

!|scenario        |Delete fake external auth system|sysname                                        |
|$res=            |GroovyWebDriver                 |manageExtAuthSystem;${TPAMHost};delete;@sysname|
|Verify_Contain_OR|$res;;Successful;;System does not exists                                        |

!3 Create\delete account on system by name
!|scenario       |Create Account on AD System            |accntName           |with password           |acntpwd           |
|PowerShellScript|manageADusers.ps1 create ${dcName} ${NETBIOSDomainName}\${FunctAcct} ${FunctAcctPwd} @accntName @acntpwd|

!|scenario       |Delete Account on AD System                             |acctName                             |
|PowerShellScript|manageADusers.ps1 delete ${dcName} ${NETBIOSDomainName}\${FunctAcct} ${FunctAcctPwd} @acctName|

!|scenario       |Set User must change pwd on logon flag                                                                              |
|PowerShellScript|manageChangePwdAtLogonCheckbox.ps1 set ${dcName} ${NETBIOSDomainName}\${FunctAcct} ${FunctAcctPwd} ${ManagedAccount}|

!|scenario        |Check User must change pwd on logon flag|value                                                                                                                    |
|$res=            |PowerShellScript                        |manageChangePwdAtLogonCheckbox.ps1 getvalue ${dcName} ${NETBIOSDomainName}\${FunctAcct} ${FunctAcctPwd} ${ManagedAccount}|
|Verify_Contain_OR|$res;;@value                                                                                                                                                      |

!|scenario       |Make account expired                                                                                         |
|PowerShellScript|makeADAccountExpired.ps1 enable ${dcName} ${NETBIOSDomainName}\${FunctAcct} ${FunctAcctPwd} ${ManagedAccount}|

!|scenario       |Make account not expired                                                                                    |
|PowerShellScript|makeADAccountExpired.ps1 clear ${dcName} ${NETBIOSDomainName}\${FunctAcct} ${FunctAcctPwd} ${ManagedAccount}|

!|scenario  |Calculate next month                                                                                                                |
|$NextMonth=|getEval|var now = new Date();if (now.getMonth() == 11) var s = 1;else var s = now.getMonth()+2;if ((s + "").length == 1) s = "0" + s|
|$NextYear= |getEval|var now = new Date();if (now.getMonth() == 11) now.getFullYear() + 1;else now.getFullYear();                                |
